$(function() {
  // TODO do page specific scripts the right way
  if ($('body.form').length === 0 ) {
    return;
  }

  var activeKnob, knob, clickedPoint, midi;
  var display = new Display($('#led'));
  var dragging = false;
  var clicked = false;
  var limit = 140;
  var activeNote, activeLight, activeLightType;
  var sequencesActive = $(".remove-sequence[value='false']").toArray().length > 1;
  var sequenceCount = 0;
  var midiOut = new MidiOut();
  var playingNote;

  var syncMidi = function(){
    console.log( "69BOT - 1");
    $('.knob').each(function(){
      if (midiOut.ready()) {
          midiOut.output.sendControlChange(
            $(this).data('control-number'),
            $(this).data('midi'),
            midiOut.channel
          );
      }
    });
  };

  var playNote = function(note) {
    console.log( "69BOT - 2");
    if (midiOut.ready()) {
      if (playingNote !== note) {
        if (playingNote){
          midiOut.output.stopNote(playingNote);
        }
        midiOut.output.playNote(note);
        playingNote = note;
      }
    }
  };

  var stopNote = function() {
    console.log( "69BOT - 3");
    if (midiOut.ready() && playingNote) {
        midiOut.output.stopNote(playingNote);
        playingNote = undefined;
    }
  };

  var toggleLight = function(element){
    console.log( "69BOT - 4 OK");
    var myInput = $("input[id='" + element.attr('for') + "']");
    console.log(myInput);
    myInput.prop('checked', !myInput.prop('checked'));
    element.find('.light').toggleClass('lit');
  }

  var getLightType = function(id) {
    console.log( "69BOT - 5 OK");
    types = ['slide', 'step_mode', 'active_step']
    for (var i = 0; i < types.length; i++) {
      if (id.indexOf(types[i]) >= 0) {
        activeLightType = types[i];
      }
    }
  }

  //
  // run immediately
  //

  $('.button').each(function(){
    var vco, vcoKnob;
    vco = $(this).attr('id').split('_')[0];
    vcoKnob = $('.knob#' + vco + '_pitch');
    if ($(this).data('active') === true) {
      $(this).addClass('lit');
      vcoKnob.addClass('lit');
    }
  });

  $('.knob').each(function() {
    var myKnob, degree;
    myKnob = new Knob(this);
    degree = myKnob.degreeForMidi($(this).data('midi'), limit);
    $(this).data('rotation', degree);
    myKnob.autoRotate(degree, '#' + $(this).attr('id'));
  });

  $('.bottom-row label, .sequence-box label').each(function(){
    var myInput = $('input#' + $(this).attr('for'));
    if (myInput.prop('checked')) {
      $(this).find('span').find('div').addClass('lit');
    }
  });

  $('.note-display').each(function(){
      $(this).html(midiNoteNumbers[$(this).data('starting-note')]);
  });

  //
  // user actions
  //
  $("#toggle-sequences").on('click tap', function(e) {
    console.log( "69BOT - 6");
    var vcoGroup = $('input[name=patch\\[vco_group\\]]:checked').val();
    switch(vcoGroup) {
      case 'one':
        sequenceCount = 3;
        break;
      case 'two':
        sequenceCount = 2;
        break;
      case 'three':
        sequenceCount = 1;
        break;
      default:
        sequenceCount = 1;
    }
    e.preventDefault();

    if (sequencesActive === false) {
      $('.sequence-message').removeClass('hidden');
      for (var i = 0; i < sequenceCount; i++) {
        var totalSequenceCount = $('.sequence-area .sequence-form').toArray().length;
        var content = $('#new_choice_form').html().replace(/QQQ/g, totalSequenceCount);
        $('.sequence-holder').append(content);
      }
      $("#toggle-sequences").text('Remove sequences');
      sequencesActive = true;
    } else {
      $('.sequence-area .remove-sequence').val('true');
      $('.sequence-area .sequence-form').addClass('hidden');
      $('.sequence-message').addClass('hidden');
      $("#toggle-sequences").text('Add sequences');
      sequencesActive = false;
    }

    $('.sequence-box .multi').each(function(){
      var myInput = $('input#' + $(this).parent().attr('for'));
      if (myInput.prop('checked')) {
        $(this).find('div').addClass('lit');
      }
    });
  });

  $('.sequence-holder').on('mousedown touchstart', '.note-display', function(e){
    console.log( "69BOT - 7");
    clickedPoint = e.pageY || Math.round(e.originalEvent.touches[0].pageY);
    e.preventDefault();
    e.stopPropagation();
    clicked = true;
    activeNote = $(this);
    activeKnob = undefined;
  });


  $('.sequence-holder').on('mousedown touchstart', '.on-off label', function(e){
    console.log( "69BOT - 8 OK");
    e.preventDefault();
    e.stopPropagation();
    clicked =  true;
    activeLight = $(this);
    activeLight.find('.light').toggleClass('lit');
    getLightType(activeLight.attr('for'));
  });

  $('.sequence-holder').on('mouseenter touchenter', '.on-off label', function(){
    console.log( "69BOT - 21 OK");
    if (dragging && activeLight && $(this).attr('for').indexOf(activeLightType) >= 0) {
      toggleLight($(this));
    }
  });

  $('#midi-device').change(function(){
    console.log( "69BOT - 9");
    midiOut.changeOutput(this);
    midiOut.enableSync();
  });

  $('#midi-channel').change(function(){
    console.log( "69BOT - 10");
    midiOut.changeChannel(this);
    midiOut.enableSync();
  });

  $('#sync').on('click tap', function(){
    console.log( "69BOT - 11");
    syncMidi();
  });

  // TODO DRY this up.
  $('#randomize').on('click tap', function(e){
    console.log( "69BOT - 12");
    e.preventDefault();
    var assignKnobValue = function(knob) {
      var randomValue, myKnob, degree;
      randomValue = Math.floor(Math.random() * (127 - 1));
      myKnob = new Knob(knob);
      degree = myKnob.degreeForMidi(randomValue, limit);
      knob.data('rotation', degree);
      knob.data('midi', randomValue);
      myKnob.autoRotate(degree, '#' + knob.attr('id'));
      myKnob.inputElement.val(randomValue);
    };

    // KNOBS
    $('.volca .knob').each(function() {
      assignKnobValue($(this));
    });

    if (midiOut.ready()) {
      $('#midi-only-controls .knob').each(function() {
        assignKnobValue($(this));
      });
    }

    // VCO ACTIVE
    $('.button').each(function(){
      var vco, randomValue, vcoKnob, input;
      vco = $(this).attr('id').split('_')[0];
      randomValue = Math.random() >= 0.5;
      input = $('input#patch_' + $(this).attr('id').split('_').slice(0, -1).join('_'));
      $(this).data('active', randomValue);
      vcoKnob = $('.knob#' + vco + '_pitch');
      if (randomValue) {
        $(this).addClass('lit');
        vcoKnob.addClass('lit');
        input.prop('checked', true);
      } else {
        $(this).removeClass('lit');
        vcoKnob.removeClass('lit');
        input.prop('checked', false);
      }
    });

    // CHECKBOXES
    $('.bottom-row label').each(function(){
      if ($('input#' + $(this).attr('for')).is(':checkbox')) {
        var myInput, randomValue;
        myInput = $('input#' + $(this).attr('for'));
        randomValue = Math.random() >= 0.5;
        if (randomValue) {
          $(this).find('span').find('div').addClass('lit');
          myInput.prop('checked', true);
        } else {
          $(this).find('span').find('div').removeClass('lit');
          myInput.prop('checked', false);
        }
      }
    });

    // VCO GROUP
    if (!sequencesActive){
      var items = ['one', 'two', 'three'];
      var item = items[Math.floor(Math.random()*items.length)];
      $('.light[data-radio]').each(function() {
        $(this).removeClass('lit');
        $(":radio[value=" + item + "]").prop('checked', false);
      });
      $(":radio[value=" + item + "]").prop('checked', true);
      $('label[for="patch_vco_group_' + item + '"]').find('span .light').addClass('lit');
    }

    syncMidi();
  });

  $('.bottom-row .on-off').on('click tap', function(){
      console.log( "69BOT - 13");
      $(this).find('.light').toggleClass('lit');
  });

  $('.bottom-row .multi').on('click tap', function(){
    console.log( "69BOT - 14");
    $('.light[data-radio]').each(function() {
      $(this).removeClass('lit');
    });
    if (sequencesActive) {
      var vcoGroup = $('input#' + $(this).parent().attr('for')).val();
      var mySequenceCount, difference, hiddenSequences,
      shownSequences, disabledSequences,totalSequenceCount, activeSequences;
      switch(vcoGroup) {
        case 'one':
          mySequenceCount = 3;
          break;
        case 'two':
          mySequenceCount = 2;
          break;
        case 'three':
          mySequenceCount = 1;
          break;
        default:
          mySequenceCount = 1;
      }
      hiddenSequences = $('.sequence-area .sequence-form.hidden').toArray();
      shownSequences = $('.sequence-area .sequence-form').not('.hidden').toArray();
      disabledSequences = $(".sequence-area .sequence-form:not('.hidden') .remove-sequence[value='true']").toArray();
      totalSequenceCount = $('.sequence-area .sequence-form').toArray().length;
      activeSequences = $(".sequence-area .remove-sequence[value='false']").toArray();

      if (mySequenceCount > activeSequences.length) {
        if (mySequenceCount > shownSequences.length) {
          // uncheck all boxes
          $(disabledSequences).each(function(){
            $(this).val('false');
            $(this).removeAttr('disabled');
          });
          $('.sequence-area .sequence-form').each(function(){
            $(this).css('opacity', '1.0');
          });
          activeSequences = $(".sequence-area .remove-sequence[value='false']").toArray();
          //add sequences
          difference = mySequenceCount - activeSequences.length;
          for (i = activeSequences.length; i < activeSequences.length + difference; i++ ) {

            var content = $('#new_choice_form').html().replace(/QQQ/g, totalSequenceCount - 1);
            $('.sequence-holder').append(content);
          }
        } else {
          //uncheck boxes
          for (i = 0; i < mySequenceCount; i++ ) {
            $(disabledSequences[i]).val('false');
            $(shownSequences[i]).css('opacity', '1.0');
          }
        }
      } else if (activeSequences.length > mySequenceCount) {
        //check boxes
        difference = activeSequences.length - mySequenceCount;
        for (i = activeSequences.length - 1; i > (activeSequences.length - 1 - difference); i--) {
          $(activeSequences[i]).val('true');
          $(shownSequences[i]).css('opacity', '0.5');
        }
      }
    }
    $(this).find('.light').addClass('lit');
  });

  $('.button').on('click tap',function(){
    console.log( "69BOT - 15");
    var vco, value, vcoKnob, input;
    vco = $(this).attr('id').split('_')[0];
    value = $(this).data('active');
    vcoKnob = $('.knob#' + vco + '_pitch');
    input = $('input#patch_' + $(this).attr('id').split('_').slice(0, -1).join('_'));
    $(this).toggleClass('lit');
    vcoKnob.toggleClass('lit');
    $(this).data('active', !value);
    input.prop('checked', !value);
  });

  $('.knob').on('mousedown touchstart',function(e) {
    console.log( "69BOT - 16");
    clickedPoint = e.pageY || Math.round(e.originalEvent.touches[0].pageY);
    e.preventDefault();
    e.stopPropagation();
    clicked = true;
    activeKnob = new Knob(this);
    activeNote = undefined;
    knob = $(activeKnob.element);
    if (!knob.data('origin')) knob.data('origin', {
      top: knob.offset().top
    });
  });

  $('.knob').mouseenter(function(){
    console.log( "69BOT - 17");
    midi = $(this).data('midi');
    if (dragging)
      return false;
    activeKnob = new Knob(this);
    display.update(midi, activeKnob.isPitch, activeKnob.isOctave, false);
  });

  $('.knob').mouseleave(function(){
    console.log( "69BOT - 18");
    if (!dragging) {
      activeKnob = undefined;
    }
  });

  $('.sequence-holder').on('mouseenter', '.note-display', function(){
    console.log( "69BOT - 19");
    var value = $(this).data('starting-note');
    if (dragging)
      return false;
    display.update(value, false, false, true);
    playNote($(this).html());
  });

  $('.sequence-holder').on('mouseleave', '.note-display', function(){
    console.log( "69BOT - 20");
    if (dragging)
      return false;
    stopNote();
  });

  $(document).on('mousemove touchmove',function(e) {
    console.log( "69BOT - 22 OK");
    if (clicked === true) {
      dragging = true;
    }
    if (dragging) {
      e.preventDefault();
      var degree, currentPoint;
      $('body').css('cursor', 'ns-resize');
      currentPoint = e.pageY || Math.round(e.originalEvent.touches[0].pageY);
      if (activeKnob){
        degree = activeKnob.rotation + (clickedPoint - currentPoint);
        if (degree > limit) {
          activeKnob.rotation = limit;
          clickedPoint = currentPoint;
        }
        if (degree < -limit) {
          activeKnob.rotation = -limit;
          clickedPoint = currentPoint;
        }
        degree = activeKnob.rotation + (clickedPoint - currentPoint);
        if (currentPoint !== clickedPoint || degree === -limit || degree === limit) {
          activeKnob.rotate(degree);
          midi = Math.round(((63.5 / limit) * degree) + 63.5);
          if (midiOut.ready()) {
              midiOut.output.sendControlChange(
                $(activeKnob.element).data('control-number'),
                midi,
                midiOut.channel
              );
          }
          activeKnob.inputElement.val(midi);
          display.update(midi, activeKnob.isPitch, activeKnob.isOctave, false);
        }
      } else if (activeNote) {
        var num = activeNote.data('starting-note') + Math.floor((clickedPoint - currentPoint)/4);
        if (num > 127) {
          num = 127;
        }
        if (num < 0) {
          num = 0;
        }
        display.update(num, false, false, true);
        activeNote.data('note', num);
        activeNote.html(midiNoteNumbers[num]);
        playNote(midiNoteNumbers[num]);
      }
    }
  });

  $(document).on('mouseup touchend', function(e) {
    console.log( "69BOT - 23");
    clicked = false;
    if (dragging) {
      dragging = false;
      var currentPoint = e.pageY || Math.round(e.originalEvent.changedTouches[0].pageY);
      $('body').css('cursor', 'default');
      if (activeKnob) {
        var currentAngle = activeKnob.rotation + (clickedPoint - currentPoint);
        if (activeKnob.rotation > limit) {
          activeKnob.rotation = limit;
          currentPoint = clickedPoint;
        }
        if (activeKnob.rotation < -limit) {
          activeKnob.rotation = -limit;
          currentPoint = clickedPoint;
        }
        $(activeKnob.element).data('rotation', currentAngle);
        $(activeKnob.element).data('midi', midi);
        activeKnob = undefined;
      } else if (activeNote) {
        activeNote.data('starting-note', activeNote.data('note'));
        stopNote();
        var inputId = activeNote["0"].parentNode.attributes["0"].value;
        $('input#' + inputId).val(activeNote.data('note'));
        activeNote = undefined;
      } else if (activeLight) {
        var myInput = $("input[id='" + activeLight.attr('for') + "']");
        myInput.prop('checked', !myInput.prop('checked'));
        activeLight = undefined;
        activeLightType = undefined;
      }
    } else if (activeKnob) {
      // so touch devices can tap knob for value
      if (typeof activeKnob === Knob) {
        display.update(activeKnob.midi, activeKnob.isPitch, false);
        activeKnob = undefined;
      }
    }
  });
});
